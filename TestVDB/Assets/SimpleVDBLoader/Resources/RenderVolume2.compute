// Each #kernel tells which function to compile; you can have many kernels
#pragma use_dxc
#include "UnityCG.cginc"
#define PI 3.14159


RWTexture3D<float> SDFWrite;
Texture3D<float> SDF;
RWStructuredBuffer<uint> Counter;
RWStructuredBuffer<uint> SDFIndexes;
RWStructuredBuffer<float3> SDFLocations;
RWStructuredBuffer<uint> ShadowBuffer;
RWTexture3D<float2> DDATextureWrite;
Texture3D<float2> DDATexture;
float4x4 _CameraInverseProjection;
float4x4 CameraToWorld;
uint ScreenWidth;
uint ScreenHeight;
float3 Size;
int LightCount;
int CurFrame;
bool DoMeshes;
float FogAdjustment;
float3 BackgroundColor;
float3 FogColor;
bool UseIndirect;
int ShadowDistanceOffset;
float3 SunDir;


struct UnityLight
{
    float3 Pos;
    float3 Dir;
    int Type;
    float3 Col;
};
StructuredBuffer<UnityLight> UnityLights;


struct Ray
{
    float3 origin;
    float3 direction;
};
Ray CreateRay(float3 A, float3 B)
{
    Ray ray;
    ray.origin = A;
    ray.direction = B;
    return ray;
}
Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);


    return CreateRay(origin, direction);
}

uint hash_with(uint seed, uint hash)
{
    // Wang hash
    seed = (seed ^ 61) ^ hash;
    seed += seed << 3;
    seed ^= seed >> 4;
    seed *= 0x27d4eb2d;
    return seed;
}
uint pcg_hash(uint seed)
{
    uint state = seed * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float2 random(uint samdim, uint pixel_index)
{
    uint hash = pcg_hash((pixel_index * (uint) 204 + samdim));

    const static float one_over_max_unsigned = asfloat(0x2f7fffff);


    float x = hash_with(CurFrame, hash) * one_over_max_unsigned;
    float y = hash_with(CurFrame + 0xdeadbeef, hash) * one_over_max_unsigned;

    return float2(x, y);
}


float HenyeyGreenstein(float g, float mu)
{
    float gg = g * g;
    return (1.0 / (4.0 * PI)) * ((1.0 - gg) / pow(1.0 + gg - 2.0 * g * mu, 1.5));
}

float DualHenyeyGreenstein(float g, float costh)
{
    return lerp(HenyeyGreenstein(-g, costh), HenyeyGreenstein(g, costh), 0.7f);
}

float PhaseFunction(float g, float costh)
{
    return DualHenyeyGreenstein(g, costh);
}

float3 MultipleOctaveScattering(float density, float mu)
{
    float attenuation = 0.2;
    float contribution = 0.2;
    float phaseAttenuation = 0.5;

    float a = 1.0;
    float b = 1.0;
    float c = 1.0;
    float g = 0.85;
    const float scatteringOctaves = 4.0;

    float3 luminance = 0.0;

    for (float i = 0.0; i < scatteringOctaves; i++)
    {
        float phaseFunction = 0.3 * c; //PhaseFunction(0.3 * c, mu);
        float3 beers = exp(-density * (FogColor) * a);

        luminance += b * phaseFunction * beers;

        a *= attenuation;
        b *= contribution;
        c *= (1.0 - phaseAttenuation);
    }
    return luminance;
}


inline bool rayBoxIntersection(const float3 ray_orig, const float3 inv_dir, const float3 Min, const float3 Max, float tMax, inout float t0, inout float t1)
{
    const float3 tmp_min = (Min - ray_orig) * inv_dir;
    const float3 tmp_max = (Max - ray_orig) * inv_dir;
    const float3 tmin = min(tmp_min, tmp_max);
    const float3 tmax = max(tmp_min, tmp_max);
    t0 = max(tmin.x, max(tmin.y, max(tmin.z, 0))); // Usually ray_tmin = 0
    t1 = min(tmax.x, min(tmax.y, min(tmax.z, tMax)));
    return (t0 <= t1);
}

inline float GetIndex(const int3 xyz)
{
    return DDATexture[xyz].x * FogAdjustment;
}

inline float MarchShadowDDA(int3 mapPos, float3 rayDir, float MaxDist)
{
    float Density = 0;
    float t0, t1;
    if (rayBoxIntersection(mapPos, rcp(rayDir), 0, Size, MaxDist, t0, t1))
    {
        float3 deltaDist = abs(rcp(rayDir)) * ShadowDistanceOffset;
        int3 rayStep = sign(rayDir) * ShadowDistanceOffset;
        float3 sideDist = ((rayStep * 0.5) + 0.5) * deltaDist;

        float minDist = min(min(sideDist.x, sideDist.y), sideDist.z);
        bool3 mask;
        while (minDist < t1)
        {
            mask = (sideDist.xyz <= minDist);
            sideDist += mask * deltaDist;
            mapPos += mask * rayStep;
            Density += GetIndex(mapPos) * ShadowDistanceOffset;
            minDist = min(min(sideDist.x, sideDist.y), sideDist.z);
            if (Density >= 100)
                break;

        }
    }
    return Density;
}

struct SHData
{
    float4 shY;
    float2 CoCg;
    int SampleCount;
};

RWStructuredBuffer<SHData> SDFVoxels;

SHData irradiance_to_SH(float3 color, float3 dir)
{
    SHData result;

    float Co = color.r - color.b;
    float t = color.b + Co * 0.5;
    float Cg = color.g - t;
    float Y = max(t + Cg * 0.5, 0.0);

    result.CoCg = float2(Co, Cg);

    float L00 = 0.282095;
    float L1_1 = 0.488603 * dir.y;
    float L10 = 0.488603 * dir.z;
    float L11 = 0.488603 * dir.x;

    result.shY = float4(L11, L1_1, L10, L00) * Y;
    result.SampleCount = 1;
    return result;
}



RWStructuredBuffer<SHData> SH;

float3 SH_to_irradiance(SHData sh)
{
    float Y = sh.shY.w / 0.282095;

    float T = Y - sh.CoCg.y * 0.5;
    float G = sh.CoCg.y + T;
    float B = T - sh.CoCg.x * 0.5;
    float R = B + sh.CoCg.x;

    return max(float3(R, G, B), 0.0);
}
float3 project_SH_irradiance(SHData sh, float3 N)
{
    float d = dot(sh.shY.xyz, N);
    float Y = 2.0 * (1.023326 * d + 0.886226 * sh.shY.w);
    Y = max(Y, 0.0);

    sh.CoCg *= Y * 0.282095 / (sh.shY.w + 1e-6);

    float T = Y - sh.CoCg.y * 0.5;
    float G = sh.CoCg.y + T;
    float B = T - sh.CoCg.x * 0.5;
    float R = B + sh.CoCg.x;

    return max(float3(R, G, B), 0.0);
}

SHData mix_SH(SHData a, SHData b, float s)
{
    SHData result;
    result.SampleCount = s;
    s = rcp(s);
    result.shY = lerp(a.shY, b.shY, s);
    result.CoCg = lerp(a.CoCg, b.CoCg, s);
    return result;
}
float3 SDFOffset;

inline float3 MarchSDF(Ray ray, out float3 Normal, out int Index)
{
    float t0, t1;
    float3 rayorig = ray.origin;
    Normal = 0;
    Index = -1;
    if (rayBoxIntersection(ray.origin, rcp(ray.direction), SDFOffset, SDFOffset + 512, 99999, t0, t1))
    {
        ray.origin += ray.direction * t0;
        t1 = t1 - t0;
        ray.origin -= SDFOffset;
        int3 mapPos = int3(floor(ray.origin));

        const float3 deltaDist = abs(rcp(ray.direction));
        
        const int3 rayStep = int3(sign(ray.direction));

        float3 sideDist = (rayStep * (mapPos - ray.origin) + (rayStep * 0.5) + 0.5) * deltaDist;

        bool3 mask;
        float minDist = min(min(sideDist.x, sideDist.y), sideDist.z);
        
        while (minDist < t1)
        {
            mask = (sideDist.xyz <= min(sideDist.yzx, sideDist.zxy));
            sideDist += mask * deltaDist;
            minDist = min(min(sideDist.x, sideDist.y), sideDist.z);
            mapPos += mask * rayStep;
            if (SDF[mapPos] == 1)
            {
                Normal.x += SDF[mapPos + int3(1, 0, 0)];
                Normal.x -= SDF[mapPos + int3(-1, 0, 0)];
                Normal.y += SDF[mapPos + int3(0, 1, 0)];
                Normal.y -= SDF[mapPos + int3(0, -1, 0)];
                Normal.z += SDF[mapPos + int3(0, 0, 1)];
                Normal.z -= SDF[mapPos + int3(0, 0, -1)];
                Normal = -normalize((Normal + sign(rayStep)) * mask);
                // Normal = sign(rayStep) * mask;
                Index = mapPos.x + mapPos.y * 512 + mapPos.z * 512 * 512;
                return length(mapPos - (rayorig - SDFOffset));
            }
        }

    }
    return 99999999;
}


inline float3 MarchDDA(Ray ray, inout float3 Luminance, out float MaxDist)
{
    float t0, t1;
    float3 Transmission = 1;
    Luminance = 0;
    float3 Normal;
    int Index;
    MaxDist = 99999999;
    float3 SurfaceLight = 0;
    if (DoMeshes)
    {
        MaxDist = MarchSDF(ray, Normal, Index);
        if (MaxDist != 99999999)
            SurfaceLight = SH_to_irradiance(SDFVoxels[SDFIndexes[Index]]) * max(dot(Normal, -(SDFVoxels[SDFIndexes[Index]].shY.xyz / SDFVoxels[SDFIndexes[Index]].shY.w * (0.282095 / 0.488603))), 0);
    }
    if (rayBoxIntersection(ray.origin, rcp(ray.direction), 0, Size, MaxDist, t0, t1))
    {
        ray.origin += ray.direction * t0;
        t1 = t1 - t0;
        int3 mapPos = int3(floor(ray.origin));

        const float3 deltaDist = abs(rcp(ray.direction));
        
        const int3 rayStep = int3(sign(ray.direction));

        float3 sideDist = (rayStep * (mapPos - ray.origin) + (rayStep * 0.5) + 0.5) * deltaDist;

        bool3 mask;
        float minDist = min(min(sideDist.x, sideDist.y), sideDist.z);
        
        while (minDist < t1)
        {
            mask = (sideDist.xyz <= min(sideDist.yzx, sideDist.zxy));
            sideDist += mask * deltaDist;
            minDist = min(min(sideDist.x, sideDist.y), sideDist.z);
            mapPos += mask * rayStep;
            float Density = GetIndex(mapPos);
            if (Density > 0.01f)
            {
                uint Pos = ShadowBuffer[mapPos.x + mapPos.y * Size.x + mapPos.z * Size.x * Size.y];
                SHData ThisSH = SH[Pos];
                float3 incoming_direction = ThisSH.shY.xyz / ThisSH.shY.w * (0.282095 / 0.488603);

                float3 lum = (project_SH_irradiance(ThisSH, -ray.direction) + project_SH_irradiance(ThisSH, ray.direction)) * 0.5f * (10.0f * PhaseFunction(0.3f, dot(-ray.direction, normalize(incoming_direction)))) + (((DDATexture[mapPos].y > 0.05f) ? DDATexture[mapPos].y : 0) * 10.0f) * Transmission; // * transmittance + Radiance;

                float3 transmittance2 = exp(-Density * (FogColor));
                float3 integscatter = (lum - lum * transmittance2);

                Luminance += integscatter * Transmission;
                Transmission *= transmittance2;
                if (Transmission.x < 0.01f)
                    break;
            }
        }

    }
    Luminance += SurfaceLight * Transmission;
    return Transmission;
}

#pragma kernel CSMain

RWTexture2D<float4> Result;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)//Kernel 0
{
    int2 ProperID = id.xy;
    Result[ProperID] = float4(1.0, 0.0, 0.0, 1);
    return;
    // float2 uv = float2((ProperID) / float2(ScreenWidth, ScreenHeight) * 2.0f - 1.0f);
    // Ray ray = CreateCameraRay(uv);
    // float3 Luminance;
    //float3 Sun = 0;//(saturate(max(min(exp(-acos(max(dot(-SunDir, -ray.direction), 0.0f))* 60.0f),12.0f),0) * transmittance));
    //if (dot(ray.direction, -SunDir) > cos(0.0235f / 2.0f)) {
    //    Sun = saturate((1.5f / (PI * (0.0235f / 2.0f) * (0.0235f / 2.0f))));
    //}
    //float MaxDist;
    //float3 Transmission = MarchDDA(ray, Luminance, MaxDist);
    //Result[ProperID] = float4(BackgroundColor * Transmission + Luminance + Sun * Transmission * (MaxDist == 99999999),1);
}


#pragma kernel CopyToTexture
StructuredBuffer<float4> NonZeroVoxels;
bool Copy1;
[numthreads(1023, 1, 1)]
void CopyToTexture(uint3 id : SV_DispatchThreadID)//Kernel 1
{
    if (!Copy1)
        DDATextureWrite[NonZeroVoxels[id.x].xyz] = float2(NonZeroVoxels[id.x].w, 0);
    else
        DDATextureWrite[NonZeroVoxels[id.x].xyz] = float2(DDATextureWrite[NonZeroVoxels[id.x].xyz].x, NonZeroVoxels[id.x].w);
}

bool ResetHistory;

inline float luminance(const float3 a)
{
    return dot(float3(0.299f, 0.587f, 0.114f), a);
}

#pragma kernel ShadeComputation
[numthreads(1023, 1, 1)]
void ShadeComputation(uint3 id : SV_DispatchThreadID, uint3 id2 : SV_GroupID)//Kernel 2
{
    int LightSelection = floor(random(23, (ResetHistory) ? id.x : id2.x).x * (LightCount));
    float3 Dir;
    float MaxDist;
    float DistanceFalloff = 1;
    switch (UnityLights[LightSelection].Type)
    {
        case 0:
            Dir = UnityLights[LightSelection].Pos - NonZeroVoxels[id.x].xyz;
            DistanceFalloff = dot(Dir, Dir);
            MaxDist = length(Dir);
            Dir /= MaxDist;
            break;
        case 1:
            Dir = -UnityLights[LightSelection].Dir;
            MaxDist = 99999.0f;
            break;

    }
    float3 LightCol = UnityLights[LightSelection].Col;
    float A = 1.0f;
    if (luminance(UnityLights[LightSelection].Col * LightCount / DistanceFalloff > 1.0f))
    {
        float3 Normal;
        int Index;
        float B = !DoMeshes ? 999999.0f : MarchSDF(CreateRay(NonZeroVoxels[id.x].xyz, Dir), Normal, Index);
        if (B > MaxDist)
            A = MarchShadowDDA(NonZeroVoxels[id.x].xyz, Dir, MaxDist);
        else
        {
            LightCol = 0.001;
        }
    }
    else
    {
        LightCol = 0.001;
    }

    float LightDensity = A;
    float3 beerslaw = MultipleOctaveScattering(LightDensity, 0);
    float3 powder = 1.0f - exp(-A * 2);
    static const SHData Temp = { 0, 0, 0, 0, 0, 0, 0 };
    if (CurFrame == 0)
        SH[id.x] = Temp;
    if (ResetHistory)
        SH[id.x].SampleCount = 1;
    SH[id.x] = mix_SH(SH[id.x], irradiance_to_SH(LightCol * beerslaw * LightCount / DistanceFalloff, -Dir), SH[id.x].SampleCount + 1);
    ShadowBuffer[NonZeroVoxels[id.x].x + NonZeroVoxels[id.x].y * Size.x + NonZeroVoxels[id.x].z * Size.y * Size.x] = id.x;

}

#pragma kernel TextureZero

[numthreads(8, 8, 8)]
void TextureZero(uint3 id : SV_DispatchThreadID)//Kernel 3
{
    ShadowBuffer[id.x + id.y * Size.x + id.z * Size.x * Size.y] = 0;
    DDATextureWrite[id.xyz] = 0;
}



#pragma kernel CreateSDF

StructuredBuffer<float3> Vertices;
StructuredBuffer<uint> Index;

float3 Scale;
float3 Position;
int MaxIndex;
[numthreads(64, 1, 1)]
void CreateSDF(uint3 id : SV_DispatchThreadID)//Kernel 4
{
    if (id.x >= MaxIndex)
        return;
    float3 p = Vertices[Index[id.x * 3]];

    float3 p2 = Vertices[Index[id.x * 3 + 1]];

    float3 p3 = Vertices[Index[id.x * 3 + 2]];

    float3 BBMax = max(max(p, p2), p3) * Scale + Position;
    float3 BBMin = min(min(p, p2), p3) * Scale + Position;

    int3 BBMaxInt = ceil(BBMax + 0.0001f) + 1;
    int3 BBMinInt = floor(BBMin - 0.00001f);
    int StepsTaken = 0;
    for (int i = BBMinInt.x; i < BBMaxInt.x; i++)
    {
        if (i <= 0 || i >= 512)
            continue;
        for (int j = BBMinInt.y; j < BBMaxInt.y; j++)
        {
            if (j <= 0 || j >= 512)
                continue;

            for (int k = BBMinInt.z; k < BBMaxInt.z; k++)
            {
                if (k <= 0 || k >= 512)
                    continue;
                StepsTaken++;
                if (StepsTaken > 100000)
                    return;
                if (SDFWrite[int3(i, j, k)] != 1)
                {
                    SDFWrite[int3(i, j, k)] = 1;
                    int Index;
                    InterlockedAdd(Counter[0], 1, Index);
                }
            }
        }
    }

}

#pragma kernel SDFTextureZero

[numthreads(8, 8, 8)]
void SDFTextureZero(uint3 id : SV_DispatchThreadID)//Kernel 5
{
    SDFWrite[id.xyz] = 0;
}


#pragma kernel SDFShade

[numthreads(1023, 1, 1)]
void SDFShade(uint3 id : SV_DispatchThreadID, uint3 id2 : SV_GroupID)//Kernel 6
{
    int LightSelection = floor(random(23, (ResetHistory) ? id.x : id2.x).x * (LightCount));
    float3 Dir;
    float MaxDist;
    float DistanceFalloff = 1;
    switch (UnityLights[LightSelection].Type)
    {
        case 0:
            Dir = UnityLights[LightSelection].Pos - (SDFLocations[id.x].xyz + SDFOffset);
            DistanceFalloff = dot(Dir, Dir);
            MaxDist = length(Dir);
            Dir /= MaxDist;
            break;
        case 1:
            Dir = -UnityLights[LightSelection].Dir;
            MaxDist = 99999.0f;
            break;

    }
    MaxDist -= 3.0f;
    float3 LightCol = UnityLights[LightSelection].Col;
    float A = 1.0f;
    if (luminance(UnityLights[LightSelection].Col * LightCount / DistanceFalloff > 1.0f))
    {
        float3 Normal;
        int Index;
        float B = !DoMeshes ? 999999.0f : MarchSDF(CreateRay(SDFLocations[id.x].xyz + sign(Dir) * 2.0f + SDFOffset, Dir), Normal, Index);
        if (B > MaxDist)
            A = MarchShadowDDA(SDFLocations[id.x].xyz + sign(Dir) * 2.0f + SDFOffset, Dir, MaxDist);
        else
        {
            LightCol = 0.001;
        }
    }
    else
    {
        LightCol = 0.001;
    }

    float LightDensity = A;
    float3 beerslaw = MultipleOctaveScattering(LightDensity, 0);
    static const SHData Temp = { 0, 0, 0, 0, 0, 0, 0 };
    if (CurFrame == 0)
        SDFVoxels[id.x] = Temp;
    if (ResetHistory)
        SDFVoxels[id.x].SampleCount = 1;
    SDFVoxels[id.x] = mix_SH(SDFVoxels[id.x], irradiance_to_SH(LightCol * beerslaw * LightCount / DistanceFalloff, -Dir), SDFVoxels[id.x].SampleCount + 1);
    if (UseIndirect)
    {
        float3 RandDirection = normalize(float3(random(34, id2.x), random(52, id2.x).x));
                {
            float3 SurfaceLight = 0;
            float3 Normal;
            int Index;
            float B = !DoMeshes ? 999999.0f : MarchSDF(CreateRay(SDFLocations[id.x].xyz + sign(RandDirection) * 2.0f + SDFOffset, RandDirection), Normal, Index);
            if (Index != -1)
            {
                SurfaceLight = SH_to_irradiance(SDFVoxels[SDFIndexes[Index]]) * max(dot(Normal, -(SDFVoxels[SDFIndexes[Index]].shY.xyz / SDFVoxels[SDFIndexes[Index]].shY.w * (0.282095 / 0.488603))), 0);
                SDFVoxels[id.x] = mix_SH(SDFVoxels[id.x], irradiance_to_SH(SurfaceLight * 2 * PI, -RandDirection), SDFVoxels[id.x].SampleCount + 1);
            }
        }
    }



}


#pragma kernel SDFInit
[numthreads(8, 8, 8)]
void SDFInit(uint3 id : SV_DispatchThreadID, uint3 id2 : SV_GroupID)//Kernel 7
{
    SDFIndexes[id.x + id.y * 512 + id.z * 512 * 512] = 0;
    if (SDF[id.xyz] != 0)
    {
        int Index;
        InterlockedAdd(Counter[1], 1, Index);
        SDFLocations[Index] = id.xyz;
        SDFIndexes[id.x + id.y * 512 + id.z * 512 * 512] = Index;
        const static SHData Temp = { 0, 0, 0, 0, 0, 0, 0 };
        SDFVoxels[Index] = Temp;
    }
}